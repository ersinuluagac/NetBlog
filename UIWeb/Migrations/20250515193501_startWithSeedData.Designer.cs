// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace UIWeb.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20250515193501_startWithSeedData")]
    partial class startWithSeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yazılım"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yapay Zeka"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Teknoloji"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Finans"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Eğitim"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kişisel Gelişim"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tarih"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sanat"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Edebiyat"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Oyun"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Spor"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sağlık"
                        });
                });

            modelBuilder.Entity("Core.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Bu konuda daha fazla bilgiye ihtiyaç var.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 8,
                            Title = "Çok Bilgilendirici",
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            Content = "Kapsamlı ve detaylı olmuş.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 21,
                            Title = "Emeğe Saygı",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Content = "Bu yazı sayesinde konuyu anladım.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 14,
                            Title = "Daha İyi Olabilir",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Content = "Faydalı bir içerik, teşekkürler.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 5,
                            Title = "Beğendim",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "Kaynak eksikliği dikkatimi çekti.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 13,
                            Title = "Eksikler Var",
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            Content = "Serinin devamını bekliyorum.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 2,
                            Title = "Devamı Gelmeli",
                            UserId = 4
                        },
                        new
                        {
                            Id = 7,
                            Content = "Bazı yerler çok aydınlatıcı.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 11,
                            Title = "Güzel Noktalara Değinilmiş",
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            Content = "Beklentimi tam karşılamadı.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 22,
                            Title = "Yetersiz",
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            Content = "Her şey yerli yerinde.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 19,
                            Title = "Çok İyi",
                            UserId = 6
                        },
                        new
                        {
                            Id = 10,
                            Content = "Daha sade anlatılabilirdi.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 7,
                            Title = "Karışık",
                            UserId = 2
                        },
                        new
                        {
                            Id = 11,
                            Content = "İçerik çok işime yaradı.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 24,
                            Title = "Yararlı Oldu",
                            UserId = 3
                        },
                        new
                        {
                            Id = 12,
                            Content = "Anlatım tarzı hoşuma gitti.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 9,
                            Title = "Etkileyici",
                            UserId = 5
                        },
                        new
                        {
                            Id = 13,
                            Content = "Basit ve anlaşılır bir dil kullanılmış.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 1,
                            Title = "Anlaşılır",
                            UserId = 4
                        },
                        new
                        {
                            Id = 14,
                            Content = "Not aldım, tekrar okuyacağım.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 17,
                            Title = "Tekrar Okuyacağım",
                            UserId = 6
                        },
                        new
                        {
                            Id = 15,
                            Content = "Daha fazla kaynak eklense iyi olurdu.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 18,
                            Title = "Yetersiz Kaynak",
                            UserId = 1
                        },
                        new
                        {
                            Id = 16,
                            Content = "Dolu dolu bir içerik olmuş.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 10,
                            Title = "Harika",
                            UserId = 2
                        },
                        new
                        {
                            Id = 17,
                            Content = "Bazı kısımlar konuyla alakasız.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 6,
                            Title = "Konu Dışı",
                            UserId = 5
                        },
                        new
                        {
                            Id = 18,
                            Content = "Başlık çok dikkatimi çekti.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 12,
                            Title = "Dikkat Çekici",
                            UserId = 3
                        },
                        new
                        {
                            Id = 19,
                            Content = "Biraz daha sadeleştirilmeli.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 16,
                            Title = "Çok Teknik",
                            UserId = 4
                        },
                        new
                        {
                            Id = 20,
                            Content = "Bazı konular kafamda oturmadı.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 4,
                            Title = "Sorularım Var",
                            UserId = 6
                        },
                        new
                        {
                            Id = 21,
                            Content = "Gayet açık bir anlatım.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 3,
                            Title = "Sade ve Net",
                            UserId = 3
                        },
                        new
                        {
                            Id = 22,
                            Content = "Seri haline getirilmeli.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 23,
                            Title = "Devamını Bekliyorum",
                            UserId = 1
                        },
                        new
                        {
                            Id = 23,
                            Content = "Dil kullanımı rahatsız edici.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 15,
                            Title = "Hoş Değil",
                            UserId = 2
                        },
                        new
                        {
                            Id = 24,
                            Content = "Faydalı bilgiler içeriyor.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 20,
                            Title = "Yeni Şeyler Öğrendim",
                            UserId = 4
                        },
                        new
                        {
                            Id = 25,
                            Content = "Her şey ayrıntılı anlatılmış.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 14,
                            Title = "Çok Detaylı",
                            UserId = 5
                        },
                        new
                        {
                            Id = 26,
                            Content = "Konuyla ilgilenmiyorum.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 11,
                            Title = "İlgimi Çekmedi",
                            UserId = 6
                        },
                        new
                        {
                            Id = 27,
                            Content = "Yazım hataları dikkatimi dağıttı.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 22,
                            Title = "Yazım Hataları Var",
                            UserId = 1
                        },
                        new
                        {
                            Id = 28,
                            Content = "Bazı eksikler var ama iyi bir başlangıç.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 9,
                            Title = "Geliştirilebilir",
                            UserId = 2
                        },
                        new
                        {
                            Id = 29,
                            Content = "Okurken zorlanmadım.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 5,
                            Title = "Okunabilirlik İyi",
                            UserId = 3
                        },
                        new
                        {
                            Id = 30,
                            Content = "Ne uzun ne kısa, tam kararında.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 8,
                            Title = "Kısa ve Öz",
                            UserId = 4
                        },
                        new
                        {
                            Id = 31,
                            Content = "İçerik özgün mü emin değilim.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 13,
                            Title = "Kopya Gibi",
                            UserId = 5
                        },
                        new
                        {
                            Id = 32,
                            Content = "Bazı yerler çıkarılabilir.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 21,
                            Title = "Gereksiz Bilgiler",
                            UserId = 6
                        },
                        new
                        {
                            Id = 33,
                            Content = "Güzel toparlanmış bir yazı.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 2,
                            Title = "İyi Hazırlanmış",
                            UserId = 1
                        },
                        new
                        {
                            Id = 34,
                            Content = "Bazı kısımlar farklı yorumlanabilir.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 6,
                            Title = "Tartışmalı",
                            UserId = 2
                        },
                        new
                        {
                            Id = 35,
                            Content = "Alışılmışın dışında bir yaklaşım.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 7,
                            Title = "Farklı Bakış",
                            UserId = 3
                        },
                        new
                        {
                            Id = 36,
                            Content = "Okurken sıkıldım.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 12,
                            Title = "Sıkıcı",
                            UserId = 4
                        },
                        new
                        {
                            Id = 37,
                            Content = "Bu terimi ilk defa duydum.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 16,
                            Title = "Yeni Öğrendim",
                            UserId = 5
                        },
                        new
                        {
                            Id = 38,
                            Content = "Emeğinize sağlık.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 17,
                            Title = "Başarılı",
                            UserId = 6
                        },
                        new
                        {
                            Id = 39,
                            Content = "Konuyu derinlemesine işlememiş.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 10,
                            Title = "Zayıf",
                            UserId = 1
                        },
                        new
                        {
                            Id = 40,
                            Content = "Çok derin bir anlam içeriyor.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 1,
                            Title = "Anlamlı",
                            UserId = 2
                        },
                        new
                        {
                            Id = 41,
                            Content = "İlk paragraf çok güçlüydü.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 3,
                            Title = "İlgi Çekici",
                            UserId = 3
                        },
                        new
                        {
                            Id = 42,
                            Content = "Kaynak listesi olmalıydı.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 19,
                            Title = "Daha Fazla Kaynak",
                            UserId = 4
                        },
                        new
                        {
                            Id = 43,
                            Content = "Şüphe bırakmamış.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 24,
                            Title = "Net Bilgi",
                            UserId = 5
                        },
                        new
                        {
                            Id = 44,
                            Content = "İlk cümle çok etkileyiciydi.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 18,
                            Title = "Giriş Güzel",
                            UserId = 6
                        },
                        new
                        {
                            Id = 45,
                            Content = "Yazardan etkilendim.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 4,
                            Title = "Konuya Hakim",
                            UserId = 1
                        },
                        new
                        {
                            Id = 46,
                            Content = "Cümleler çok uzun.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 20,
                            Title = "Okuması Zor",
                            UserId = 2
                        },
                        new
                        {
                            Id = 47,
                            Content = "Genel olarak beğendim.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 23,
                            Title = "Oldukça İyi",
                            UserId = 3
                        },
                        new
                        {
                            Id = 48,
                            Content = "Böyle içerikler çoğalsın.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 15,
                            Title = "Devam Et",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Core.Models.Like", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            PostId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 2,
                            PostId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 1,
                            PostId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 2,
                            PostId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 2,
                            PostId = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 3,
                            PostId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 3,
                            PostId = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 4,
                            PostId = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 4,
                            PostId = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 5,
                            PostId = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 5,
                            PostId = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 6,
                            PostId = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 6,
                            PostId = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 1,
                            PostId = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 2,
                            PostId = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 3,
                            PostId = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 4,
                            PostId = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 5,
                            PostId = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 6,
                            PostId = 17,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 1,
                            PostId = 18,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 2,
                            PostId = 19,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 3,
                            PostId = 20,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 4,
                            PostId = 21,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 5,
                            PostId = 22,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Core.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowCase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Content = "HTML, web sayfalarını yapılandırmak için kullanılan temel bir işaretleme dilidir. Her içerik bir etiket ile başlar ve biter.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image1.jpeg",
                            ShowCase = true,
                            Summary = "Etiketleme dili",
                            Title = "HTML",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Content = "CSS, HTML elemanlarının görünümünü düzenlemek için kullanılır. Renkler, yazı tipleri ve yerleşim düzenleri gibi görsel öğeleri belirler.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image2.jpeg",
                            ShowCase = true,
                            Summary = "Tasarım dili",
                            Title = "CSS",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Content = "JavaScript, web sayfalarına etkileşim ve dinamik özellikler kazandırmak için kullanılan bir programlama dilidir. Olay yönetimi, DOM manipülasyonu ve API çağrıları gibi işlemleri gerçekleştirir.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image3.jpeg",
                            ShowCase = false,
                            Summary = "Dinamiklik katar",
                            Title = "JavaScript",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Content = "Makine öğrenimi, verilerden örüntüleri tespit ederek öğrenen algoritmaların geliştirilmesini sağlar. Supervised, unsupervised ve reinforcement learning gibi türleri vardır.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image4.jpeg",
                            ShowCase = false,
                            Summary = "Veriden öğrenme",
                            Title = "Makine Öğrenimi",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Content = "Yapay sinir ağları, biyolojik sinir ağlarından esinlenilerek geliştirilen algoritmalardır. Derin öğrenme ile birlikte popüler hale gelmiştir.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image5.jpeg",
                            ShowCase = true,
                            Summary = "İnsan beyninden ilham",
                            Title = "Yapay Sinir Ağları",
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Content = "Akıllı telefonlar, iletişimin ötesinde çok işlevli cihazlardır. Uygulamalar, kameralar ve internet bağlantısı gibi pek çok özellik sunar.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image6.jpeg",
                            ShowCase = false,
                            Summary = "Mobil teknoloji",
                            Title = "Akıllı Telefonlar",
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            Content = "Nesne tanıma, görüntülerdeki nesneleri tanımlamak için yapay zekayı kullanır. Derin öğrenme ve konvolüsyonel sinir ağları bu alanda önemli rol oynar.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image7.jpeg",
                            ShowCase = false,
                            Summary = "Görüntü işlemede devrim",
                            Title = "Yapay Zeka ile Nesne Tanıma",
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            Content = "Borsa, menkul kıymetlerin alınıp satıldığı bir piyasadır. Hisse senetleri, tahviller ve yatırım fonları gibi finansal araçlar işlem görür.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image8.jpeg",
                            ShowCase = true,
                            Summary = "Yatırım piyasası",
                            Title = "Borsa Nedir?",
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            Content = "Kripto paralar, merkeziyetsiz, blockchain teknolojisine dayalı dijital para birimleridir. Bitcoin ve Ethereum en bilinen örneklerdendir.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image9.jpeg",
                            ShowCase = false,
                            Summary = "Dijital para birimleri",
                            Title = "Kripto Paralar",
                            UserId = 3
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            Content = "Online eğitim, internet üzerinden bilgi edinmeyi mümkün kılar. Platformlar sayesinde zaman ve mekândan bağımsız öğrenim sağlanır.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image10.jpeg",
                            ShowCase = false,
                            Summary = "Erişilebilir öğrenim",
                            Title = "Online Eğitim",
                            UserId = 4
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 5,
                            Content = "Eğitim teknolojileri, sınıflarda interaktif tahtalar, mobil uygulamalar ve online içerikler gibi araçların kullanımını kapsar.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image11.jpeg",
                            ShowCase = false,
                            Summary = "Dijital araçlar",
                            Title = "Eğitimde Teknoloji",
                            UserId = 5
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 6,
                            Content = "Zaman yönetimi, günlük görevleri planlayarak daha üretken olmayı sağlar. Ajanda tutmak ve önceliklendirme bu konuda etkilidir.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image12.jpeg",
                            ShowCase = false,
                            Summary = "Verimli yaşam",
                            Title = "Zaman Yönetimi",
                            UserId = 6
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 6,
                            Content = "Pozitif alışkanlıklar kazanmak, kişisel gelişimin temelidir. 21 gün kuralı ve tekrarlama alışkanlık edinmede etkilidir.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image13.jpeg",
                            ShowCase = true,
                            Summary = "İrade gücü",
                            Title = "Alışkanlık Kazanmak",
                            UserId = 1
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 7,
                            Content = "Osmanlı İmparatorluğu, 1299’dan 1922’ye kadar hüküm süren çok uluslu bir devletti. Avrupa, Asya ve Afrika kıtalarında topraklara sahipti.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image14.jpeg",
                            ShowCase = true,
                            Summary = "600 yıllık imparatorluk",
                            Title = "Osmanlı Tarihi",
                            UserId = 2
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 7,
                            Content = "Türkiye Cumhuriyeti, 1923 yılında Mustafa Kemal Atatürk önderliğinde kuruldu. Laiklik, eğitim reformları ve sanayileşme bu dönemin temelidir.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image15.jpeg",
                            ShowCase = false,
                            Summary = "Yeni bir dönem",
                            Title = "Cumhuriyetin Kuruluşu",
                            UserId = 3
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 8,
                            Content = "Modern sanat, geleneksel sanat anlayışının dışına çıkarak yenilikçi ve özgür anlatımları kapsar. Dadaizm, kübizm gibi akımlar buna örnektir.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image16.jpeg",
                            ShowCase = false,
                            Summary = "Yorumlara açık",
                            Title = "Modern Sanat",
                            UserId = 4
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 8,
                            Content = "Rönesans, Avrupa’da sanat, bilim ve düşünce alanında büyük ilerlemelerin yaşandığı bir dönemdir. Leonardo da Vinci ve Michelangelo gibi sanatçılar bu dönemde yetişmiştir.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image17.jpeg",
                            ShowCase = false,
                            Summary = "Sanatın altın çağı",
                            Title = "Rönesans Dönemi",
                            UserId = 5
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 9,
                            Content = "Türk edebiyatı, divan, halk ve modern edebiyat olmak üzere üç ana dönemde incelenir. Şiir, hikâye ve roman gibi türler öne çıkar.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image18.jpeg",
                            ShowCase = true,
                            Summary = "Zengin kültürel miras",
                            Title = "Türk Edebiyatı",
                            UserId = 6
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 9,
                            Content = "Roman, kurmaca bir olay örgüsü etrafında gelişen edebi türdür. Karakter derinliği ve olay örgüsü romana özgü unsurlardır.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image19.jpeg",
                            ShowCase = false,
                            Summary = "Kurgu anlatılar",
                            Title = "Roman Türü",
                            UserId = 1
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 10,
                            Content = "Video oyunları, eğlence ve hikâye anlatımı sunan dijital medya ürünleridir. Konsollar, bilgisayarlar ve mobil cihazlar üzerinden oynanabilir.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image20.jpeg",
                            ShowCase = true,
                            Summary = "Etkileşimli eğlence",
                            Title = "Video Oyunları",
                            UserId = 2
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 10,
                            Content = "Oyun geliştirme, yazılım, grafik tasarımı ve ses gibi farklı disiplinlerin bir araya gelerek etkileşimli deneyimler oluşturduğu bir süreçtir.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image21.jpeg",
                            ShowCase = false,
                            Summary = "Yazılım ve tasarım",
                            Title = "Oyun Geliştirme",
                            UserId = 3
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 11,
                            Content = "Futbol, dünya genelinde en yaygın oynanan spor dallarından biridir. Modern futbolun temelleri 19. yüzyılda İngiltere'de atılmıştır.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image22.jpeg",
                            ShowCase = false,
                            Summary = "Köklü geçmiş",
                            Title = "Futbolun Tarihi",
                            UserId = 4
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 11,
                            Content = "Düzenli spor yapmak, kalp sağlığını korur, kas gelişimini destekler ve stres seviyesini azaltır. Her yaşta yapılabilir.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image23.jpeg",
                            ShowCase = true,
                            Summary = "Sağlıklı yaşam",
                            Title = "Sporun Faydaları",
                            UserId = 5
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 12,
                            Content = "Dengeli ve düzenli beslenme, vücudun ihtiyaç duyduğu vitamin ve mineralleri karşılayarak sağlıklı bir yaşam sürdürülmesini sağlar.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image24.jpeg",
                            ShowCase = false,
                            Summary = "Sağlıklı yaşamın temeli",
                            Title = "Beslenme Alışkanlıkları",
                            UserId = 6
                        });
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserName = "Arbores"
                        },
                        new
                        {
                            Id = 2,
                            UserName = "Surgens"
                        },
                        new
                        {
                            Id = 3,
                            UserName = "Tenebris"
                        },
                        new
                        {
                            Id = 4,
                            UserName = "Luminis"
                        },
                        new
                        {
                            Id = 5,
                            UserName = "Ignitus"
                        },
                        new
                        {
                            Id = 6,
                            UserName = "Gelidus"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6425becf-510c-4473-9156-8912035e1f07",
                            ConcurrencyStamp = "3b365d34-e181-478b-8d3f-3a31aa38ff32",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "0e6ba79f-901c-4ef2-8c92-4efb8d9ac640",
                            ConcurrencyStamp = "781ab7ab-9706-485d-8fc9-6977d61d3898",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "e0377419-2eba-454d-b363-573b4c5bb219",
                            ConcurrencyStamp = "06c05039-2c89-43f9-b4cf-4770690f8833",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Models.Comment", b =>
                {
                    b.HasOne("Core.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Like", b =>
                {
                    b.HasOne("Core.Models.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Post", b =>
                {
                    b.HasOne("Core.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Core.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
