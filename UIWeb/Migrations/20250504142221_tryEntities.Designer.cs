// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace UIWeb.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20250504142221_tryEntities")]
    partial class tryEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(2746),
                            IsDeleted = false,
                            Name = "Yazılım"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(2755),
                            IsDeleted = false,
                            Name = "Teknoloji"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(2756),
                            IsDeleted = false,
                            Name = "Oyun"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(2757),
                            IsDeleted = false,
                            Name = "Yapay Zeka"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(2758),
                            IsDeleted = false,
                            Name = "Sağlık"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(2760),
                            IsDeleted = false,
                            Name = "İş Dünyası"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(2804),
                            IsDeleted = false,
                            Name = "Finans Dünyası"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(2805),
                            IsDeleted = false,
                            Name = "Tarih"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(2807),
                            IsDeleted = false,
                            Name = "Sanat"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(2808),
                            IsDeleted = false,
                            Name = "Kişisel Gelişim"
                        });
                });

            modelBuilder.Entity("Core.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Çok güzel bir yazı olmuş.",
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(3512),
                            IsDeleted = false,
                            PostId = 3,
                            Title = "Harika!",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Gönderiyi hiç beğenmedim.",
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(3517),
                            IsDeleted = false,
                            PostId = 3,
                            Title = "Berbat",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Content = "İlginç bir fikir.",
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(3519),
                            IsDeleted = false,
                            PostId = 2,
                            Title = "İlginç",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Core.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(3835),
                            IsDeleted = false,
                            PostId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(3838),
                            IsDeleted = false,
                            PostId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(3839),
                            IsDeleted = false,
                            PostId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(3840),
                            IsDeleted = false,
                            PostId = 3,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(3841),
                            IsDeleted = false,
                            PostId = 4,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Core.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Content = "HTML bir işaretleme dilidir.",
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(5773),
                            ImageUrl = "/images/html.png",
                            IsDeleted = false,
                            Summary = "Etiketleme",
                            Title = "HTML",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Content = "CSS bir işaretleme dilidir ve HTML etiketlerine görsellik eklemek için kullanılır.",
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(5779),
                            ImageUrl = "/images/css.png",
                            IsDeleted = false,
                            Summary = "Renklendirme",
                            Title = "CSS",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Content = "Javascript bir programlama dilidir. HTML ve CSS ile oluşturulmuş sayfalara etkileşim ve hareket katmak için kullanılır.",
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(5781),
                            IsDeleted = false,
                            Summary = "Hareketlendirme",
                            Title = "Javascript",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Content = "Doğu Roma'nın ve Osmanlı'nın başkentidir. Önemli bir yarımadadır.",
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(5782),
                            IsDeleted = false,
                            Summary = "Megakent",
                            Title = "İstanbul",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Content = "Tam olarak bilinmemekle birlikte kökenlerine dair iki farklı görüş vardır.",
                            CreatedAt = new DateTime(2025, 5, 4, 17, 22, 21, 231, DateTimeKind.Local).AddTicks(5784),
                            IsDeleted = false,
                            Summary = "Slav ülkesi",
                            Title = "Rusya",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserName = "Arbores"
                        },
                        new
                        {
                            Id = 2,
                            UserName = "Surgens"
                        });
                });

            modelBuilder.Entity("Core.Models.Comment", b =>
                {
                    b.HasOne("Core.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Like", b =>
                {
                    b.HasOne("Core.Models.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId");

                    b.HasOne("Core.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Post", b =>
                {
                    b.HasOne("Core.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Core.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
